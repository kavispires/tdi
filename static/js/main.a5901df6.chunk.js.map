{"version":3,"sources":["logo.svg","pages/Home.tsx","hooks/useCardWidth.tsx","pages/ImageCardsPage.tsx","hooks/useQueryParams.ts","pages/SuspectsPage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Home","className","src","logo","alt","useCardWidth","minWidth","maxWidth","element","document","getElementById","width","offsetWidth","quantity","getQuantity","useMemo","value","Math","min","max","floor","Number","isNaN","pageWidth","Header","Layout","Content","DECK","Array","fill","items","map","e","i","label","key","icon","FileImageOutlined","ImageCards","qp","defaultParams","useSearchParams","searchParams","setSearchParams","add","undefined","delete","set","String","remove","useEffect","Object","entries","forEach","has","queryParams","toString","split","reduce","entry","useQueryParams","deck","useState","current","setCurrent","cardWidth","id","style","paddingInline","onClick","selectedKeys","mode","theme","Boolean","PreviewGroup","process","placeholder","SuspectCards","useCopyToClipboard","copyToClipboard","message","useMessage","messageApi","contextHolder","useAsync","a","fetch","response","json","result","loading","entryId","data","url","url2","role","info","gender","ManOutlined","WomanOutlined","name","pt","en","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a5901df6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.95dca254.svg\";","import logo from '../logo.svg';\n\nexport function Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n    </div>\n  );\n}\n","import { useMemo } from 'react';\n\n/**\n * Get a card width in px based on the window size of the user's browser\n * @param minWidth minimum width of a card\n * @param maxWidth maximum width of a card\n * @returns\n */\nexport function useCardWidth(minWidth = 120, maxWidth = 600): number {\n  const element = document.getElementById('page');\n\n  const width = element?.offsetWidth ?? 320;\n\n  const quantity = getQuantity(width);\n\n  return useMemo(() => {\n    const value = Math.min(Math.max(Math.floor(width / quantity), minWidth), maxWidth);\n    return Number.isNaN(value) ? minWidth : value;\n  }, [width, quantity, minWidth, maxWidth]);\n}\n\nconst getQuantity = (pageWidth: number) => {\n  if (pageWidth < 120) return 1;\n  if (pageWidth < 400) return 2;\n  if (pageWidth < 800) return 4;\n  if (pageWidth < 1000) return 6;\n  if (pageWidth < 1440) return 8;\n  return 10;\n};\n","import { FileImageOutlined } from '@ant-design/icons';\nimport { Image, Layout, Menu, MenuProps } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useQueryParams } from 'hooks/useQueryParams';\nimport { useCardWidth } from 'hooks/useCardWidth';\n\nconst { Header, Content } = Layout;\n\nconst DECK = Array(84).fill(1);\n\nconst items: MenuProps['items'] = Array(10)\n  .fill(1)\n  .map((e, i) => ({\n    label: `TD Deck ${e + i}`,\n    key: `d${e + i}`,\n    icon: <FileImageOutlined />,\n  }));\n\nexport function ImageCards() {\n  const qp = useQueryParams({ deck: 'd1' });\n  const [current, setCurrent] = useState('');\n  const cardWidth = useCardWidth();\n\n  const onClick: MenuProps['onClick'] = (e) => {\n    qp.add('deck', e.key);\n  };\n\n  useEffect(() => {\n    setCurrent(qp.queryParams.deck);\n  }, [qp.queryParams]);\n\n  return (\n    <Layout className=\"page\" id=\"page\">\n      <Header className=\"page__header\" style={{ paddingInline: 0 }}>\n        <Menu onClick={onClick} selectedKeys={[current]} mode=\"horizontal\" items={items} theme=\"dark\" />\n      </Header>\n      <Content className=\"page__content\">\n        {Boolean(current) && (\n          <Image.PreviewGroup>\n            {DECK.map((e, i) => {\n              const id = e + i < 10 ? `0${e + i}` : `${e + i}`;\n\n              return (\n                <Image\n                  key={`img-${id}`}\n                  width={cardWidth}\n                  src={`${process.env.PUBLIC_URL}/images/td/${current}/${id}.jpg`}\n                  placeholder\n                />\n              );\n            })}\n          </Image.PreviewGroup>\n        )}\n      </Content>\n    </Layout>\n  );\n}\n","import { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport function useQueryParams(defaultParams: Record<string, string | number> = {}) {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const add = (key: string, value: unknown) => {\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, String(value));\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const remove = (key: string, value: unknown) => {\n    searchParams.delete(key);\n    setSearchParams(searchParams);\n  };\n\n  useEffect(() => {\n    Object.entries(defaultParams).forEach(([key, value]) => {\n      if (!searchParams.has(key)) {\n        add(key, value);\n      }\n    });\n  }, []); // eslint-disable-line\n\n  const queryParams = searchParams\n    .toString()\n    .split('&')\n    .reduce((qp: Record<string, string>, entry) => {\n      const [key, value] = entry.split('=');\n      if (key && value !== undefined) {\n        qp[key] = value;\n      }\n      return qp;\n    }, {});\n\n  return {\n    add,\n    remove,\n    queryParams,\n  };\n}\n","import { Image, Layout, message } from 'antd';\nimport { Fragment, useEffect } from 'react';\nimport { useCardWidth } from 'hooks/useCardWidth';\nimport { useAsync, useAsyncFn, useCopyToClipboard } from 'react-use';\nimport { ManOutlined, WomanOutlined } from '@ant-design/icons';\n\nconst { Header, Content } = Layout;\n\nconst DECK = Array(114).fill(1);\n\nexport function SuspectCards() {\n  const [state, copyToClipboard] = useCopyToClipboard();\n  const cardWidth = useCardWidth();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { loading, value } = useAsync(async () => {\n    const response = await fetch(`${process.env.PUBLIC_URL}/data/us/info.json`);\n    const result = await response.json();\n    return result;\n  }, []);\n\n  const info = (url: string) => {\n    copyToClipboard(url);\n    messageApi.info(`Copied ${url}`);\n  };\n\n  // const onClick: MenuProps['onClick'] = (e) => {\n  //   qp.add('deck', e.key);\n  // };\n\n  // useEffect(() => {\n  //   setCurrent(qp.queryParams.deck);\n  // }, [qp.queryParams]);\n\n  return (\n    <Layout className=\"page\" id=\"page\">\n      <Header className=\"page__header\" style={{ paddingInline: 0 }}>\n        <h1>Suspects</h1> {loading} {contextHolder}\n      </Header>\n      <Content className=\"page__content suspects\">\n        <Image.PreviewGroup>\n          {DECK.fill(1).map((e, i) => {\n            const id = e + i < 10 ? `0${e + i}` : `${e + i}`;\n            const entryId = `us-${id}`;\n            const data = Boolean(value) ? value[entryId] : null;\n            const url = `${process.env.PUBLIC_URL}/images/us/${id}.jpg`;\n            const url2 = `https://www.kavispires.com/tdi/images/us/${id}.jpg`;\n            return (\n              <Fragment key={`img-${id}`}>\n                <div className=\"suspect\" style={{ width: `${cardWidth}px` }}>\n                  <Image width={cardWidth} src={url} placeholder className=\"suspect__image\" />\n                  {Boolean(data) && (\n                    <span className=\"suspect__name\" role=\"button\" onClick={() => info(url2)}>\n                      {data.gender === 'name' ? <ManOutlined /> : <WomanOutlined />}\n                      <br />\n                      {data.name.pt}\n                      <br />\n                      {data.name.en}\n                    </span>\n                  )}\n                </div>\n                {/* <Image\n                    key={`img-${id}`}\n                    width={cardWidth}\n                    src={`${process.env.PUBLIC_URL}/images/td/${current}/${id}.jpg`}\n                    placeholder\n                  />\n                  <Image\n                    key={`img-${id}`}\n                    width={cardWidth}\n                    src={`${process.env.PUBLIC_URL}/images/td/${current}/${id}.jpg`}\n                    placeholder\n                  /> */}\n              </Fragment>\n            );\n          })}\n        </Image.PreviewGroup>\n      </Content>\n    </Layout>\n  );\n}\n","import { HashRouter, Route, Routes } from 'react-router-dom';\nimport { Home } from 'pages/Home';\nimport { ImageCards } from 'pages/ImageCardsPage';\nimport { SuspectCards } from 'pages/SuspectsPage';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/image-cards\" element={<ImageCards />} />\n        <Route path=\"/suspects\" element={<SuspectCards />} />\n      </Routes>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}